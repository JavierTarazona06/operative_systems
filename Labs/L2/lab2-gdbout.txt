#Javier Andres Tarazona Jimenez
#elr490
#11411898

# A1

(gdb) info locals
i = 0
x = 0
y = 0
arrSize = 50
iPtr1 = 0x0
iPtr2 = 0x0
numbers = 0x4052a0
heapNeighbour = 0x405370
mallocBlk = 113

print numbers + (arrSize-1)
$1 = (int *) 0x405364

# A2

As:
iPtr1 = 0x0
iPtr2 = 0x0
They are null pointers, so they are not accessing the array.

However, if I move the break to the line 43, I got:

(gdb) info locals
i = 0
x = 0
y = 0
arrSize = 50
iPtr1 = 0x4052a0
iPtr2 = 0x4052f0
numbers = 0x4052a0
heapNeighbour = 0x405370
mallocBlk = 113

Where 
(gdb) print (int) iPtr1
$1 = 4215456
(gdb) print (int) iPtr2
$2 = 4215536
(gdb) print (int) numbers
$4 = 4215456
(gdb) print (int) numbers + arrSize -1
$3 = 4215505

So, iPtr1 is at the first position on array and iPtr2 is outside the bounds.

# A3

I tried to check the change of pointers using:
break 43 if iPtr1 > numbers + (arrSize-1)

However the condtion is never met as the iterator i,
 doesn't change after the first cylce. 
 It remains in 50, so the for cycle will be executed just once.
 
 # A4
 
(gdb) break 43

(gdb) print (int) *iPtr2
$10 = 1274

(gdb) print iPtr2
$26 = (int *) 0x4053b0
(gdb) print (int) iPtr2
$27 = 4215728

(gdb) print iPtr2 - heapNeighbour
$28 = 16

(gdb) print &heapNeighbour[16]
$31 = (void *) 0x4053b0
(gdb) print (int) &heapNeighbour[16]
$32 = 4215728


#B1

kernel/main.c:44 scheduler();


